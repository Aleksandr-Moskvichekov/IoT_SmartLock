import asyncio
import threading
import time
import os
import subprocess
import random
import json
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from cryptography.fernet import Fernet

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ
try:
    from hardware import Keypad, LCD, MotionSensor, Relay
    HARDWARE_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏.")
    HARDWARE_AVAILABLE = False

#–ù–ê–°–¢–†–û–ô–ö–ò
BOT_TOKEN = "7605084706:AAE041dILkRYMPO2ik0js59zcOilwYukytw"
ALLOWED_USER_ID = 1593693874 #1593693874 1052464218
CODES_FILE = "codes.json.enc"
KEY_FILE = "secret.key"

#–û–ë–™–ï–ö–¢–´ IRL
lcd = LCD() if HARDWARE_AVAILABLE else None
keypad = Keypad() if HARDWARE_AVAILABLE else None
relay = Relay() if HARDWARE_AVAILABLE else None
motion_sensor = MotionSensor() if HARDWARE_AVAILABLE else None

#–°–û–°–¢–û–Ø–ù–ò–Ø
access_codes = {
    "master": {},
    "temp_codes": {},
    "one_time_codes": {}
}

#–ì–õ–û–ë–ê–õ–¨–ù–´–ï –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò
lock_status = False
bot_app = None
bot_loop = None
chat_id_for_motion = None

#–ó–ê–©–ò–¢–ê JSON
def generate_key():
    key = Fernet.generate_key()
    with open(KEY_FILE, "wb") as f:
        f.write(key)

def load_key():
    if not os.path.exists(KEY_FILE):
        generate_key()
    return open(KEY_FILE, "rb").read()

fernet = Fernet(load_key())

def load_codes():
    global access_codes
    try:
        with open(CODES_FILE, "rb") as f:
            encrypted = f.read()
            decrypted = fernet.decrypt(encrypted)
            access_codes = json.loads(decrypted)
    except FileNotFoundError:
        print("‚ö†Ô∏è –ó–∞—â–∏—â—ë–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ codes.json.enc: {e}")


def save_codes():
    try:
        data = json.dumps(access_codes).encode()
        encrypted = fernet.encrypt(data)
        with open(CODES_FILE, "wb") as f:
            f.write(encrypted)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è codes.json.enc: {e}")

####################################################–õ–û–ì–ò–ö–ê 
# –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–±–æ—Ä–∞ PIN-–∫–æ–¥–æ–≤
wrong_attempts = 0
MAX_ATTEMPTS = 5
LOCK_DURATION = 60  #—Å–µ–∫—É–Ω–¥
lock_until = 0

def update_lcd():
    if not lcd:
        return
    if lock_status:
        lcd.display("Door", "OPEN", 1)
    else:
        lcd.display("Door", "CLOSED", 1)

def is_authorized(user_id: int) -> bool:
    return user_id == ALLOWED_USER_ID

def is_code_valid(code: str) -> bool:
    global wrong_attempts, lock_until

    current_time = time.time()
    if current_time < lock_until:
        if lcd:
            lcd.display("LOCKED", f"{int(lock_until - current_time)}s", delay=2)
        return False

    if code in access_codes["master"]:
        wrong_attempts = 0
        return True

    if code in access_codes["temp_codes"]:
        if access_codes["temp_codes"][code] >= current_time:
            wrong_attempts = 0
            return True
        else:
            del access_codes["temp_codes"][code]
            save_codes()

    if code in access_codes["one_time_codes"]:
        if access_codes["one_time_codes"][code] > 0:
            access_codes["one_time_codes"][code] -= 1
            if access_codes["one_time_codes"][code] == 0:
                del access_codes["one_time_codes"][code]
            save_codes()
            if bot_app and chat_id_for_motion:
                asyncio.run_coroutine_threadsafe(
                    bot_app.bot.send_message(chat_id=chat_id_for_motion,
                                             text=f"üîê –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥ {code} –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω."),
                    bot_loop
                )
            wrong_attempts = 0
            return True

    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞ ‚Äî –∫–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π
    wrong_attempts += 1
    if wrong_attempts >= MAX_ATTEMPTS:
        lock_until = current_time + LOCK_DURATION
        if lcd:
            lcd.display("LOCKED", f"{LOCK_DURATION}s", delay=2)
        if bot_app and chat_id_for_motion:
            asyncio.run_coroutine_threadsafe(
                bot_app.bot.send_message(chat_id=chat_id_for_motion,
                                         text=f"üö´ 5 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ {LOCK_DURATION} —Å–µ–∫—É–Ω–¥."),
                bot_loop
            )
    return False

async def add_master_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_user.id):
        return
    try:
        code = context.args[0]
        if isinstance(access_codes["master"], str):
            access_codes["master"] = [access_codes["master"]]
        if code not in access_codes["master"]:
            access_codes["master"].append(code)
            save_codes()
            await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–∞—Å—Ç–µ—Ä-–∫–æ–¥: {code}")
        else:
            await update.message.reply_text("‚ö†Ô∏è –¢–∞–∫–æ–π –∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /addmaster <–∫–æ–¥>")

async def list_codes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_user.id):
        return
    now = time.time()

    # –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä-–∫–æ–¥–æ–≤
    master = access_codes["master"]
    master_list = [f"{code}" for code in master] if isinstance(master, list) else [master]

    # –°–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤
    temp = access_codes["temp_codes"]
    temp_list = [
        f"{code} ‚Äî –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {int(expire - now)} —Å–µ–∫"
        for code, expire in temp.items() if expire > now
    ]

    # –°–ø–∏—Å–æ–∫ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –∫–æ–¥–æ–≤
    one_time = access_codes["one_time_codes"]
    one_time_list = [
        f"{code} ‚Äî –æ—Å—Ç–∞–ª–æ—Å—å {count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π"
        for code, count in one_time.items() if count > 0
    ]

    result = "\nüìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã:\n"
    if master_list:
        result += "\nüõ°Ô∏è –ú–∞—Å—Ç–µ—Ä-–∫–æ–¥—ã:\n" + "\n".join(master_list)
    if temp_list:
        result += "\n‚è±Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–¥—ã:\n" + "\n".join(temp_list)
    if one_time_list:
        result += "\nüéØ –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –∫–æ–¥—ã:\n" + "\n".join(one_time_list)
    if not (master_list or temp_list or one_time_list):
        result += "\n‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤."

    result += "\n\n‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä-–∫–æ–¥: /addmaster <–∫–æ–¥>"
    result += "\nüóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ–¥: /delcode <–∫–æ–¥>"
    await update.message.reply_text(result)

async def delete_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_user.id):
        return
    try:
        code = context.args[0]
        removed = False
        if code in access_codes["temp_codes"]:
            del access_codes["temp_codes"][code]
            removed = True
        if code in access_codes["one_time_codes"]:
            del access_codes["one_time_codes"][code]
            removed = True
        if code in access_codes["master"]:
            access_codes["master"].remove(code)
            removed = True
        if removed:
            save_codes()
            await update.message.reply_text(f"üóëÔ∏è –ö–æ–¥ {code} —É–¥–∞–ª—ë–Ω")
        else:
            await update.message.reply_text("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /delcode <–∫–æ–¥>")


def unlock_lock():
    global lock_status
    lock_status = True
    if relay:
        relay.off()
    update_lcd()

    if bot_app and chat_id_for_motion and bot_loop:
        asyncio.run_coroutine_threadsafe(
            bot_app.bot.send_message(
                chat_id=chat_id_for_motion,
                text="üîì –î–≤–µ—Ä—å –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞."
            ),
            bot_loop
        )

def lock_lock():
    global lock_status
    lock_status = False
    if relay:
        relay.on()
    update_lcd()

    if bot_app and chat_id_for_motion and bot_loop:
        asyncio.run_coroutine_threadsafe(
            bot_app.bot.send_message(
                chat_id=chat_id_for_motion,
                text="üîí –î–≤–µ—Ä—å –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞."
            ),
            bot_loop
        )

#–û–¢–ü–†–ê–í–ö–ê –§–û–¢–û –ü–†–ò –î–í–ò–ñ–ï–ù–ò–ò
async def send_motion_photo():
    try:
        image_path = "motion.jpg"
        command = [
            "ffmpeg", "-f", "v4l2", "-input_format", "nv12", "-video_size", "640x480",
            "-i", "/dev/video0", "-frames:v", "1", image_path, "-y"
        ]
        subprocess.run(command, check=True)
        with open(image_path, "rb") as f:
            await bot_app.bot.send_photo(chat_id=chat_id_for_motion, photo=f, caption="üì∏ –î–≤–∏–∂–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
        os.remove(image_path)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")

#CALLBACK –î–í–ò–ñ–ï–ù–ò–Ø
def on_motion_detected():
    print("‚ö° –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ")
    if lcd:
        lcd.display("Motion", "Detected!", delay=2)
        lcd.display("Enter PIN")

    if HARDWARE_AVAILABLE and bot_app and chat_id_for_motion and bot_loop:
        asyncio.run_coroutine_threadsafe(send_motion_photo(), bot_loop)

if motion_sensor:
    motion_sensor.on_motion(on_motion_detected)

#–í–í–û–î –° –ö–õ–ê–í–ò–ê–¢–£–†—ã
def keypad_loop():
    if not keypad:
        print("‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        return

    lcd.display("Enter PIN") if lcd else None
    code = ""
    while True:
        key = keypad.get_key()
        if key:
            if key == "#":
                if code == "0000":
                    lock_lock()
                    lcd.display("Access", "LOCKED", delay=2) if lcd else print("üîí Locking")
                elif is_code_valid(code):
                    unlock_lock()
                    lcd.display("Access", "OPENED", delay=2) if lcd else print("‚úÖ Access granted")
                else:
                    lcd.display("Access", "DENIED", delay=2) if lcd else print("‚ùå Access denied")
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∫–æ–¥–µ
                    if bot_app and chat_id_for_motion and bot_loop:
                        asyncio.run_coroutine_threadsafe(
                            bot_app.bot.send_message(
                                chat_id=chat_id_for_motion,
                                text="‚ùå –í–≤–µ–¥—ë–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."
                            ),
                            bot_loop
                        )
                code = ""
                lcd.display("Enter PIN") if lcd else None

            elif key == "*":
                code = ""  # –°—Ç–∏—Ä–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–≤–æ–¥–∞
                lcd.display("Enter PIN") if lcd else None

            elif key == "A":
                unlock_lock()
                lcd.display("Manual", "OPEN", delay=2)
                lcd.display("Enter PIN")
                if bot_app and chat_id_for_motion and bot_loop:
                    asyncio.run_coroutine_threadsafe(
                        bot_app.bot.send_message(
                            chat_id=chat_id_for_motion,
                            text="üîì –ó–∞–º–æ–∫ –æ—Ç–∫—Ä—ã—Ç –≤—Ä—É—á–Ω—É—é."
                        ),
                        bot_loop
                    )

            elif key == "B":
                lock_lock()
                lcd.display("Manual", "CLOSE", delay=2)
                lcd.display("Enter PIN")
                if bot_app and chat_id_for_motion and bot_loop:
                    asyncio.run_coroutine_threadsafe(
                        bot_app.bot.send_message(
                            chat_id=chat_id_for_motion,
                            text="üîí –ó–∞–º–æ–∫ –∑–∞–∫—Ä—ã—Ç –≤—Ä—É—á–Ω—É—é."
                        ),
                        bot_loop
                    )

            else:
                code += key
                lcd.write_line("*" * len(code), line=1) if lcd else print("*" * len(code))
        time.sleep(0.1)



#–¢–ï–õ–ï–ì–†–ê–ú-–ë–û–¢

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global chat_id_for_motion
    if not is_authorized(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    chat_id_for_motion = update.effective_chat.id
    keyboard = [
        [KeyboardButton("üîí –ó–∞–∫—Ä—ã—Ç—å –∑–∞–º–æ–∫"), KeyboardButton("üîì –û—Ç–∫—Ä—ã—Ç—å –∑–∞–º–æ–∫")],
        [KeyboardButton("üì∑ –§–æ—Ç–æ"), KeyboardButton("üîê –°—Ç–∞—Ç—É—Å –∑–∞–º–∫–∞")],
        [KeyboardButton("üîë –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–¥"), KeyboardButton("üé≤ –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥")],
        [KeyboardButton("üìã –ö–æ–¥—ã")]
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üì° –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º: /help", reply_markup=markup)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if is_authorized(update.effective_user.id):
        await update.message.reply_text("üîì –°—Ç–∞—Ç—É—Å: –û—Ç–∫—Ä—ã—Ç." if lock_status else "üîí –°—Ç–∞—Ç—É—Å: –ó–∞–∫—Ä—ã—Ç.")

async def lock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if is_authorized(update.effective_user.id):
        lock_lock()
        lcd.display("Enter PIN")
        await update.message.reply_text("üîí –ó–∞–º–æ–∫ –∑–∞–∫—Ä—ã—Ç.")

async def unlock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if is_authorized(update.effective_user.id):
        unlock_lock()
        lcd.display("Enter PIN")
        await update.message.reply_text("üîì –ó–∞–º–æ–∫ –æ—Ç–∫—Ä—ã—Ç.")

async def setcode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    try:
        code = context.args[0]
        duration = int(context.args[1])
        expire = time.time() + duration * 60
        access_codes["temp_codes"][code] = expire
        save_codes()
        await update.message.reply_text(f"‚úÖ –ö–æ–¥ {code} –∞–∫—Ç–∏–≤–µ–Ω {duration} –º–∏–Ω—É—Ç")
    except:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /setcode <–∫–æ–¥> <–º–∏–Ω—É—Ç—ã>")

async def generate_one_time_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_user.id):
        return
    code = str(random.randint(100000, 999999))
    access_codes["one_time_codes"][code] = 1
    save_codes()
    await update.message.reply_text(f"üé´ –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥: {code}\n–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 1 —Ä–∞–∑")

async def photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_user.id):
        return
    if not HARDWARE_AVAILABLE:
        await update.message.reply_text("üì∑ –ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    image_path = "photo.jpg"
    try:
        subprocess.run([
            "ffmpeg", "-f", "v4l2", "-input_format", "nv12", "-video_size", "640x480",
            "-i", "/dev/video0", "-frames:v", "1", image_path, "-y"
        ], check=True)
        with open(image_path, "rb") as f:
            await context.bot.send_photo(chat_id=update.effective_chat.id, photo=f)
        os.remove(image_path)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞–º–µ—Ä—ã: {e}")

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_user.id):
        return
    match update.message.text:
        case "üîê –°—Ç–∞—Ç—É—Å –∑–∞–º–∫–∞": await status(update, context)
        case "üîì –û—Ç–∫—Ä—ã—Ç—å –∑–∞–º–æ–∫": await unlock(update, context)
        case "üîí –ó–∞–∫—Ä—ã—Ç—å –∑–∞–º–æ–∫": await lock(update, context)
        case "üì∑ –§–æ—Ç–æ": await photo(update, context)
        case "üîë –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–¥": await update.message.reply_text("/setcode <–∫–æ–¥> <–º–∏–Ω—É—Ç—ã>")
        case "üé≤ –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥": await generate_one_time_code(update, context)
        case "üìã –ö–æ–¥—ã": await list_codes(update, context)
        case _: await update.message.reply_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_user.id):
        return
    await update.message.reply_text(
        "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n"
        "\n/start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –º–µ–Ω—é"
        "\n/status ‚Äî —Å—Ç–∞—Ç—É—Å –∑–∞–º–∫–∞"
        "\n/lock ‚Äî –∑–∞–∫—Ä—ã—Ç—å –∑–∞–º–æ–∫"
        "\n/unlock ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–º–æ–∫"
        "\n/photo ‚Äî —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ"
        "\n/setcode <–∫–æ–¥> <–º–∏–Ω—É—Ç—ã> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–¥"
        "\n/addmaster <–∫–æ–¥> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä-–∫–æ–¥"
        "\n/delcode <–∫–æ–¥> ‚Äî —É–¥–∞–ª–∏—Ç—å –ª—é–±–æ–π –∫–æ–¥"
        "\n/codes ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤"
    )


def start_bot():
    global bot_app, bot_loop
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    bot_app = app
    bot_loop = asyncio.get_event_loop()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("lock", lock))
    app.add_handler(CommandHandler("unlock", unlock))
    app.add_handler(CommandHandler("setcode", setcode))
    app.add_handler(CommandHandler("photo", photo))
    app.add_handler(CommandHandler("codes", list_codes))
    app.add_handler(CommandHandler("addmaster", add_master_code))
    app.add_handler(CommandHandler("delcode", delete_code))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT, text_handler))
    app.run_polling()

#–ó–ê–ü–£–°–ö
if __name__ == "__main__":
    load_codes()
    if HARDWARE_AVAILABLE:
        threading.Thread(target=keypad_loop, daemon=True).start()
    start_bot()
